plugins {
    id "java-library"
    id "jacoco"
    id "org.sonarqube" version "3.3"
    id "com.github.ben-manes.versions" version "0.41.0"
}

group 'com.github.kaklakariada'
version = '0.0.1'


subprojects {
    apply plugin: "java"
    apply plugin: "jacoco"

    group = rootProject.group
    version = rootProject.version

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    tasks.withType(JavaExec) {
        javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    }

    dependencies {
        implementation 'org.slf4j:slf4j-api:1.7.33'
        runtimeOnly 'ch.qos.logback:logback-classic:1.2.10'
        testImplementation "org.assertj:assertj-core:3.22.0"
        testImplementation "org.junit-pioneer:junit-pioneer:1.5.0"
        testImplementation "nl.jqno.equalsverifier:equalsverifier:3.8.2"
        testImplementation 'junit:junit:4.13.2'
        testImplementation 'org.hamcrest:hamcrest-all:1.3'
        testImplementation 'org.mockito:mockito-core:4.2.0'
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-Xlint:all'
    }


    testing {
        suites {
            test {
                useJUnitJupiter('5.8.2')
            }
        }
    }

    test {
        if(logger.infoEnabled) {
            testLogging.showStandardStreams = true
        }
        jvmArgs '-XX:+HeapDumpOnOutOfMemoryError', '-enableassertions'
    }

    jacocoTestReport {
        reports {
            xml.required = true
        }
    }

    rootProject.tasks["sonarqube"].dependsOn(tasks["jacocoTestReport"])
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    gradleReleaseChannel = "current"
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}
